						
## Commands for Linux

		Commands 				Description

	man < command > ; man ls        -> brings up the manual on how to use the ls command
	
	< command > -- help        	-> gives you the menu for that command 
	
	echo				Output any text that we provide

	whoami				Find ouut what user we're currently logged in as 

	ls 			   	-> list what is in a directory like files and folder
	ls -a or --all             	-> gives light to hidden folders
	ls -lh                     	-> gives a list of permisions of all files in the directory

	cd 			      -> change directory

	cat 			      -> can print out contents of a file into the console

	pwd			      -> Prints out current file location 

	find -name *<file ending>     -> print out every file with that ending like .txt for example

	mkdir                         -> Makes Directory ( Folder )

	touch <file name >            -> Creats file 
	cp                            -> Copy a file or folder
	mv                            -> Move a file or folder

	rm                            -> Remove a file 
	rm -r                         -> Allows you to remove folders

	file                          -> Determine the type of file
	cat  <file name>              -> prints out the contents of a file

	su <user name>                -> Switchs users within the system
	su <user name> *-l or login*  -> allows you to inherit alot more properties of the new user like environment variables and the likes

	sudo < Command >              -> Gives root permission to the command
	sudo apt -install             -> allows you to install a package like git for example

	nano <filename>                ->    Creats a file and enter the file to read or write to
	wget <HTTP full link>          ->    This allows you to get files from the internet and download them in the terminal

 	scp                            ->    This allows you to copy files and directories form a current to remote or remote to current systems

	ps                             ->    this command allows you to get a list of running process of our current user's session and info like 
                                     status code, the session that is running it, usage time of the CPU and name of program or command that is being executed.

	ps aux                         ->    this commands allows you to see system process

	top                            ->    this commands give you a real time update about the process on your system

	kill <PID #>                   ->    kills the PID of that process under that id
	SIGTERM                        ->    Kills the process, but allows it to do some cleanup tasks beforehand
	SIGKILL                        ->    Kill the process - doesn't do any cleanup after the fact
	SIGSTOp                        ->    Stop/suspend a process

	systemctl [option] [service]   ->    you either - stop, start, enable , disable -> then just add the service you want to run 

	fg                             ->    any process that is in the background can brought forward with this command



          SCP             * Our Machine to Remote Machine *
Example of scp :  scp important.txt ubuntu@192.168.1.30:/home/ubuntu/transferred.txt
What it means  :  command - file name on our machine - user on remote @ ip address - : where to store the file and what the file will be on the remote system.

                       * Remote System to Our Machine *
Example of scp :  scp ubuntu@192.168.1.30:/home/ubuntu/documents.txt notes.txt 
What it means  :  command - remote machine user @ ip address - where the file is and the name of it to copy - new name for our system to call it

		

		Symbol / Operator			Description
		
			&			This Operator allows you to run commands in the background of your terminal
			
			&&			This Operator allows you to combine multiple commands together in one line of your terminal.
			
			>			This operator is a redirector - meaning that we can tkae the output from a command ( such as using cat to output a file ) and direct it elsewhere.
				
			>>			This operator deos the same function of the > operator but appends the output rather than replacing it.



A crontab is simply a special file with formatting that is recognised by the cron process to execute each line step-by-step. Crontabs require 6 specific values:

  Value	                  Description
MIN	                    What minute to execute at
HOUR	                  What hour to execute at
DOM	                    What day of the month to execute at
MON                    	What month of the year to execute at
DOW	                    What day of the week to execute at
CMD	                    The actual command that will be executed.

Let's use the example of backing up files. You may wish to backup "cmnatic"'s  "Documents" every 12 hours. We would use the following formatting: 

0 *12 * * * cp -R /home/cmnatic/Documents /var/backups/

An interesting feature of crontabs is that these also support the wildcard or asterisk (*). If we do not wish to provide a value for that specific field, i.e. 
we don't care what month, day, or year it is executed -- only that it is executed every 12 hours, we simply just place an asterisk.

This can be confusing to begin with, which is why there are some great resources such as the online "Crontab Generator" that allows you to use a friendly application to 
generate your formatting for you! As well as the site "Cron Guru"!

Crontabs can be edited by using crontab -e, where you can select an editor (such as Nano) to edit your crontab.
