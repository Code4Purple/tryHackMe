
## More Commands

nano <filename>                ->    Creats a file and enter the file to read or write to
wget <HTTP full link>          ->    This allows you to get files from the internet and download them in the terminal

scp                            ->    This allows you to copy files and directories form a current to remote or remote to current systems

ps                             ->    this command allows you to get a list of running process of our current user's session and info like 
                                     status code, the session that is running it, usage time of the CPU and name of program or command that is being executed.

ps aux                         ->    this commands allows you to see system process

top                            ->    this commands give you a real time update about the process on your system

kill <PID #>                   ->    kills the PID of that process under that id
SIGTERM                        ->    Kills the process, but allows it to do some cleanup tasks beforehand
SIGKILL                        ->    Kill the process - doesn't do any cleanup after the fact
SIGSTOp                        ->    Stop/suspend a process

systemctl [option] [service]   ->    you either - stop, start, enable , disable -> then just add the service you want to run 

fg                             ->    any process that is in the background can brought forward with this command



                       * Our Machine to Remote Machine *
Example of scp :  scp important.txt ubuntu@192.168.1.30:/home/ubuntu/transferred.txt
What it means  :  command - file name on our machine - user on remote @ ip address - : where to store the file and what the file will be on the remote system.

                       * Remote System to Our Machine *
Example of scp :  scp ubuntu@192.168.1.30:/home/ubuntu/documents.txt notes.txt 
What it means  :  command - remote machine user @ ip address - where the file is and the name of it to copy - new name for our system to call it


## Serving files form your host - WEB

buntu machines come pre-packaged with python3. Python helpfully provides a lightweight and easy-to-use module called "HTTPServer". This module turns your computer 
into a quick and easy web server that you can use to serve your own files, where they can then be downloaded by another computing using commands such as curland wget. 

Python3's "HTTPServer" will serve the files in the directory that you run the command, but this can be changed by providing options that can be found in the manual pages. 
Simply, all we need to do is run python3 -m  http.server to start the module! In the screenshot below, we are serving from a directory called "webserver", which has a single named "file".

Now, let's use wgetto download the file using the computer's IP address and the name of the file. One flaw with this module is that you have no way of indexing, so you must know the exact name 
and location of the file that you wish to use. This is why I prefer to use Updog. What's Updog? A more advanced yet lightweight webserver. But for now, let's stick to using Python's "HTTP Server".

In the screenshot above, we can see that wget has successfully downloaded the file named "file" to our machine. .
This request is logged by SimpleHTTPServer much as any web server would, which I have captured in the screenshot below.


## How do Processes Start?

Let's start off by talking about namespaces. The Operating System (OS) uses namespaces to ultimately split up the resources available on the computer to (such as CPU, RAM and priority) processes. 
Think of it as splitting your computer up into slices -- similar to a cake. Processes within that slice will have access to a certain amount of computing power, however, 
it will be a small portion of what is actually available to every process overall.

Namespaces are great for security as it is a way of isolating processes from another -- only those that are in the same namespace will be able to see each other.

We previously talked about how PID works, and this is where it comes into play. The process with an ID of 0 is a process that is started when the system boots. 
This process is the system's init on Ubuntu, such as systemd, which is used to provide a way of managing a user's processes and sits in between the operating system and the user. 

For example, once a system boots and it initialises, systemd is one of the first processes that are started. 
Any program or piece of software that we want to start will start as what's known as a child process of systemd. 
This means that it is controlled by systemd, but will run as its own process (although sharing the resources from systemd) to make it easier for us to identify and the likes.

##  Getting Processes/Services to Start on Boot

Some applications can be started on the boot of the system that we own. For example, web servers, database servers or file transfer servers. 
This software is often critical and is often told to start during the boot-up of the system by administrators.

In this example, we're going to be telling the apache web server to be starting apache manually and then telling the system to launch apache2 on boot.

Enter the use of systemctl -- this command allows us to interact with the systemd process/daemon. Continuing on with our example, 
systemctl is an easy to use command that takes the following formatting: systemctl [option] [service]

For example, to tell apache to start up, we'll use systemctl start apache2. Seems simple enough, right? Same with if we wanted to stop apache, we'd just replace the [option] with stop 
(instead of start like we provided)

We can do four options with systemctl:
            Start
            Stop  
            Enable
            Disable


What command would we use to bring a previously backgrounded process back to the foreground?   -> fg

## Automation

Users may want to schedule a certain action or task to take place after the system has booted.
Take, for example, running commands, backing up files, or launching your favourite programs on, such as Spotify or Google Chrome.

We're going to be talking about the cron process, but more specifically, how we can interact with it via the use of crontabs . 
Crontab is one of the processes that is started during boot, which is responsible for facilitating and managing cron jobs.

A crontab is simply a special file with formatting that is recognised by the cron process to execute each line step-by-step. Crontabs require 6 specific values:

  Value	                  Description
MIN	                    What minute to execute at
HOUR	                  What hour to execute at
DOM	                    What day of the month to execute at
MON                    	What month of the year to execute at
DOW	                    What day of the week to execute at
CMD	                    The actual command that will be executed.

Let's use the example of backing up files. You may wish to backup "cmnatic"'s  "Documents" every 12 hours. We would use the following formatting: 

0 *12 * * * cp -R /home/cmnatic/Documents /var/backups/

An interesting feature of crontabs is that these also support the wildcard or asterisk (*). If we do not wish to provide a value for that specific field, i.e. 
we don't care what month, day, or year it is executed -- only that it is executed every 12 hours, we simply just place an asterisk.

This can be confusing to begin with, which is why there are some great resources such as the online "Crontab Generator" that allows you to use a friendly application to 
generate your formatting for you! As well as the site "Cron Guru"!

Crontabs can be edited by using crontab -e, where you can select an editor (such as Nano) to edit your crontab.

--------------------------------------------------

## Introducing Packages & Software Repos

When developers wish to submit software to the community, they will submit it to an  "apt" repository. If approved, their programs and tools will be released into the wild. 
Two of the most redeeming features of Linux shine to light here: User accessibility and the merit of open source tools.

When using thelscommand on a Ubuntu 20.04 Linux machine, these files serve as the gateway/registry. 





Whilst Operating System vendors will maintain their own repositories, you can also add community repositories to your list! This allows you to extend the capabilities of your OS. 
Additional repositories can be added by using the add-apt-repositorycommand or by listing another provider! For example, some vendors will have a repository that is closer to their 
geographical location.



## Managing Your Repositories (Adding and Removing)

Normally we use the apt command to install software onto our Ubuntu system. The apt command is a part of the package management software also named apt.
Apt contains a whole suite of tools that allows us to manage the packages and sources of our software, and to install or remove software at the same time.

One method of adding repositories is to use the add-apt-repository command we illustrated above, but we're going to walk through adding and removing a repository manually. 
Whilst you can install software through the use of package installers such as dpkg, the benefits of apt means that whenever we update our system -- the repository that contains the 
pieces of software that we add also gets checked for updates. 

In this example, we're going to add the text editor Sublime Text to our Ubuntu machine as a repository as it is not a part of the default Ubuntu repositories. 
When adding software, the integrity of what we download is guaranteed by the use of what is called GPG (Gnu Privacy Guard) keys. These keys are essentially a safety check from the 
developers saying, "here's our software". If the keys do not match up to what your system trusts and what the developers used, then the software will not be downloaded.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

So, to start, we need to add the GPG key for the developers of Sublime Text 3. (Note that TryHackMe instances do not have internet access and so we're not expecting you to 
add this to the machine that you deploy, as it would fail.)

1. Let's download the GPG key and use apt-key to trust it:  wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -

2. Now that we have added this key to our trusted list, we can now add Sublime Text 3's repository to our apt sources list. A good practice is to have a separate file for 
every different community/3rd party repository that we add.

2.1. Let's create a file named sublime-text.list in /etc/apt/sources.list.d and enter the repository information like so:

2.2. And now use Nano or a text editor of your choice to add & save the Sublime Text 3 repository into this newly created file:

2.3. After we have added this entry, we need to update apt to recognise this new entry -- this is done using the apt update command

2.4. Once successfully updated, we can now proceed to install the software that we have trusted and added to apt using apt install sublime-text

Removing packages is as easy as reversing. This process is done by using the add-apt-repository --remove ppa:PPA_Name/ppa command or by manually deleting the file that we 
previously added to. Once removed, we can just use apt remove [software-name-here] i.e. apt remove sublime-text

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## System Log

We briefly touched upon log files and where they can be found in Linux Fundamentals Part 1. However, let's quickly recap. Located in the /var/log directory, 
these files and folders contain logging information for applications and services running on your system. The Operating System  (OS) has become pretty good at 
automatically managing these logs in a process that is known as "rotating".

I have highlighted some logs from three services running on a Ubuntu machine:

An Apache2 web server
Logs for the fail2ban service, which is used to monitor attempted brute forces, for example
The UFW service which is used as a firewall

These services and logs are a great way in monitoring the health of your system and protecting it. Not only that, but the logs for services such as a web server contain 
information about every single request - allowing developers or administrators to diagnose performance issues or investigate an intruder's activity. For example, 
the two types of log files below that are of interest:
                    
                    access log
                    error log
There are, of course, logs that store information about how the OS is running itself and actions that are performed by users, such as authentication attempts.


## Other Things from here

To recap, this room introduced you to the following topics:

Using terminal text editors
General utilities such as downloading and serving contents using a python webserver
A look into processes
Maintaining & automating your system by the use of crontabs, package management, and reviewing logs
Continue your learning in some other TryHackMe rooms that are dedicated to Linux tools or utilities:

Bash Scripting - https://tryhackme.com/room/bashscripting
Regular Expressions - https://tryhackme.com/room/catregex
